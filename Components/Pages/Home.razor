@page "/"


@using DashboardTrilhaEsporte.Application;
@using DashboardTrilhaEsporte.Enums;
@using DashboardTrilhaEsporte.Domain.DTOs;
@using DashboardTrilhaEsporte.Domain.Service;

@using DashboardTrilhaEsporte.Data;
@using DashboardTrilhaEsporte.Components.Layout;

@inject DashboardTrilhaEsporte.Domain.Service.FiltroStateService FiltroService

@inject DashboardTrilhaEsporte.Domain.Service.FiltroStateService FiltroService


@inject ISnackbar Snackbar
@inject IJSRuntime JS
@inject SkuMarketplaceManager SkuManager
@inject AnymarketManager AnymarketManager
@inject ResumoFinanceiroManager FinanceiroManager

@inject ScrapingManager scrapingManager




@if (skuMarketplaceListaCorrente == null || anymarketDadosListaCorrente == null || financeiroDadosDTOListaCorrente ==
null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
       <!-- Barra superior -->
    <MudPaper Class="d-flex justify-space-between align-center px-3 py-2"
                Style="border-radius: 6px; background-color: transparent; position: fixed; top: 0; left: 0; right: 0; z-index: 1000;">
                <MudGrid Justify="Justify.FlexEnd" AlignItems="AlignItems.Center" Spacing="10"
                    Style="align-items: center;">
                    <MudItem>
                        <MudText Typo="Typo.body1" Style="font-size: 1rem; white-space: nowrap;">
                            @{
                                var brasilTimeZone = TimeZoneInfo.FindSystemTimeZoneById("E. South America Standard Time");
                                var brasilDateTime = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, brasilTimeZone);
                            }
                            <b>Última Atualização:</b> @brasilDateTime.ToString("d MMM yyyy, HH:mm") GMT-3
                        </MudText>
                    </MudItem>

                    <MudItem>
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@OnFiltroClick">
                            <MudIcon Icon="@Icons.Material.Filled.Search" Size="Size.Medium" Class="ml-5" />
                            Filtros Avançados
                        </MudButton>
                    </MudItem>
                </MudGrid>
    </MudPaper>

    <MudCollapse Expanded="@mostrarFiltro">

        <MudCard Class="mx-auto my-4" Style="max-width: 100%;" Elevation="4">
            <MudCardContent Class="p-6">
                <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-6 text-primary font-weight-bold">
                    Filtros Avançados de Vendas
                </MudText>

                <MudForm @ref="form">
                    <MudGrid Spacing="3">

                        <!-- Grupo: Data Comissão -->
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle2">Filtrar por Data Comissão</MudText>
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudDatePicker Style="width: 100%;" Label="Data Comissão Início"
                                @bind-Date="_filtro.dataComissaoInicio" MinDate="@SkuManager.resultDTO.dataComissaoInicial"
                                MaxDate="@SkuManager.resultDTO.dataComissaoFinal" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudDatePicker Style="width: 100%;" Label="Data Comissão Final"
                                @bind-Date="_filtro.dataComissaoFinal" MinDate="@SkuManager.resultDTO.dataComissaoInicial"
                                MaxDate="@SkuManager.resultDTO.dataComissaoFinal" />
                        </MudItem>


                        <!-- Grupo: Tipo Evento / Erros -->
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle2" Class="mt-4">Filtrar por Tipo de Evento / Erro</MudText>
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudSelect T="Erros" Label="Erros" MultiSelection="true" SelectedValues="_filtro.listaErros"
                                SelectedValuesChanged="OnErrosChanged" Style="width: 100%;">
                                @foreach (var erro in Enum.GetValues<Erros>())
                                {
                                    <MudSelectItem Value="@erro">@erro.GetDescription()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudSelect T="Eventos" Label="Eventos" MultiSelection="true"
                                SelectedValues="_filtro.TipoEventos" SelectedValuesChanged="OnEventosChanged"
                                Style="width: 100%;">
                                @foreach (var evento in Enum.GetValues<Eventos>())
                                {
                                    <MudSelectItem Value="@evento">@evento.GetDescription()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>



                        <!-- Grupo: Número do Pedido -->
                        <MudItem xs="12">
                            <MudText Typo="Typo.subtitle2" Class="mt-4">Filtrar por Número do Pedido</MudText>
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField Style="width: 100%;" Label="Número do Pedido"
                                @bind-Value="_filtro.numeroPedido" />
                        </MudItem>

                        <!-- Grupo: Data Ciclo -->
                        <MudItem xs="10">
                            <MudText Typo="Typo.subtitle2" Class="mt-4">Filtrar por Data Ciclo</MudText>
                        </MudItem>

                        <MudItem xs="10" md="6">
                            <MudSelect T="DateTime ?" Label="Selecionar Data do Ciclo"
                                @bind-Value="_filtro.dataCicloSelecionada" Style="width: 100%;">
                                @if (SkuManager.resultDTO?.dateTimesCiclos != null &&
                                                            SkuManager.resultDTO.dateTimesCiclos.Any())
                                {
                                    @foreach (var data in SkuManager.resultDTO.dateTimesCiclos)
                                    {
                                        <MudSelectItem Value="@(data as DateTime?)">@data.ToString("dd/MM/yyyy")</MudSelectItem>
                                    }
                                }
                                else
                                {
                                    <MudSelectItem T="DateTime ?" Value="null" Disabled>Não há datas disponíveis</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>


                    </MudGrid>

                    <MudDivider Class="my-4" />

                    <MudStack Row="true" Spacing="2">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AplicarFiltro">
                            Aplicar Filtro
                        </MudButton>

                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="ResetarFiltro">
                            Resetar
                        </MudButton>
                    </MudStack>
                </MudForm>
            </MudCardContent>
        </MudCard>

    </MudCollapse>

<MudTabs Rounded="true" TabPanelClass="px-4">

        <MudTabPanel Text="Visão Geral SkuMarkeplace">
            <Markeplace skuMarketplaceListaCorrente="@skuMarketplaceListaCorrente" dadosTiposErros="@dadosTiposErros"
                labelsTiposErros="@labelsTiposErros" dadosTiposEventos="@dadosTiposEventos"
                labelsTiposEventos="@labelsTiposEventos">
            </Markeplace>
        </MudTabPanel>
        <MudTabPanel Text="Anymarket">
            <Anymarket anymarketDadosListaCorrente="@anymarketDadosListaCorrente"
                OnFiltrarAction="@AtualizarListaAnymarket">

            </Anymarket>
        </MudTabPanel>
        <MudTabPanel Text="Resumo Financeiro">
            <ResumoFinanceiro OnFiltrarAction="@AtualizarListaResumoFinanceiro"
                financeiroDadosDTOListaCorrente="@financeiroDadosDTOListaCorrente"
                dadosErrosResumoFinanceiro="@dadosErrosResumoFinanceiro"
                dadosStatusResumoFinanceiro="@dadosStatusResumoFinanceiro"
                labelsErrosResumoFinanceiro="@labelsErrosResumoFinanceiro"
                labelsStatusResumoFinanceiro="@labelsStatusResumoFinanceiro">
            </ResumoFinanceiro>
        </MudTabPanel>
        
        <MudTabPanel Text="Descontar Houver">

            <SkuMarketplaceDescontar skuMarketplaceDescontarListaCorrente="@skuMarketplaceDescontarListaCorrente">
            </SkuMarketplaceDescontar>

        </MudTabPanel>

        <MudTabPanel Text="Scraping">
            <ScrapingPage scrapingDadosDTOListaCorrente="@scrapingDadosDTOListaCorrente">
                
            </ScrapingPage>
        </MudTabPanel>


    </MudTabs>
}
@code {

    // Lista corrente de dados do SkuMarketplace
    private SkuMarketplaceDadosDTO? skuMarketplaceListaCorrente;

    // Lista corrente de dados do Anymarket
    private AnymarketDadosDTO? anymarketDadosListaCorrente;

    // Lista corrente de dados do SkuMarketplace com erro de devolução
    private SkuMarketplaceDadosDTO? skuMarketplaceDescontarListaCorrente;

    // Copia da lista corrente de dados do Anymarket (para o filtro interno da seção)
    private AnymarketDadosDTO? anymarketDadosListaTemporaria = new AnymarketDadosDTO();


    // Lista corrente de dados do Financeiro
    private ResumoFinanceiroDadosDTO? financeiroDadosDTOListaCorrente;

    // Copia da lista corrente de dados do Resumo Finaceiro (para o filtro interno da seção)
    private ResumoFinanceiroDadosDTO? financeiroDadosDTOListaTemporaria = new ResumoFinanceiroDadosDTO();

    private ScrapingDadosDTO? scrapingDadosDTOListaCorrente;

    // Dados para os gráficos
    private double[] dadosTiposErros = [];
    private string[] labelsTiposErros = [];
    private double[] dadosTiposEventos = [];
    private string[] labelsTiposEventos = [];

    private string[] labelsStatusResumoFinanceiro = [];
    private double[] dadosStatusResumoFinanceiro = [];
    private string[] labelsErrosResumoFinanceiro = [];
    private double[] dadosErrosResumoFinanceiro = [];



    // Formulario para filtro avançado
    public MudForm form;

    // instancia um objeto do SkuMarketplaceFilterService para filtragem de dados
    public SkuMarketplaceFilterService _filtro = new();


    // Controla a exibição do filtro avançado
    private bool mostrarFiltro;
    private bool _drawerOpen = true;


    // Lista de Erros selecionado na seção do anymarket
    private List<AnymarketErros> tipoErroSelecionado { get; set; } = new();

    private List<StatusPagamento> resumoFinaceiroStatus { get; set; } = new();


    // Metodo princial (inicia e renderiza os dados)
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            // Aguarda os dados do SkuManager
            await SkuManager.CarregarDadosAsync();

            scrapingManager.CarregarDadosAsync();

            // Verifica se os dados estão prontos
            if (SkuManager.resultDTO != null && SkuManager.resultDTO.skuMarketplaceDTOs != null)
            {
                // Cria uma nova instância de SkuMarketplaceDadosDTO com os dados carregados
                skuMarketplaceListaCorrente = SkuManager.resultDTO;

                // Aguarda os dados do AnymarketManager
                await AnymarketManager.CarregarDadosAsync(skuMarketplaceListaCorrente.skuMarketplaceDTOs);

                // cria uma nova instância de AnymarketDadosDTO com os dados carregados
                anymarketDadosListaCorrente = AnymarketManager.anymarketDadosDTO;

                // Mantem uma cópia temporária dos dados do Anymarket ( para o filtro interno dessa secção)
                anymarketDadosListaTemporaria.anymarketDTOs = anymarketDadosListaCorrente.anymarketDTOs.ToList();

                // Aguarda os dados do FinanceiroManager
                await FinanceiroManager.CarregarDadosAsync(skuMarketplaceListaCorrente.skuMarketplaceDTOs);


                // cria uma nova instância de ResumoFinanceiroDadosDTO com os dados carregados
                financeiroDadosDTOListaCorrente = FinanceiroManager.FinanceiroDadosDTO;

                // Mantem uma cópia temporária dos dados do Financeiro ( para o filtro interno dessa secção)
                financeiroDadosDTOListaTemporaria.resumoFinanceiroDTOs = financeiroDadosDTOListaCorrente.resumoFinanceiroDTOs.ToList();

                // Cria uma nova instância de SkuMarketplaceDadosDTO com os dados com erro de devolução

                SkuMarketplaceFilterService filtroDescontar = new SkuMarketplaceFilterService();
                filtroDescontar.TipoEventos.Add(Eventos.DescontarHoveHouve);

                skuMarketplaceDescontarListaCorrente = new SkuMarketplaceDadosDTO(
                SkuMarketplaceFilterService.AplicarFiltros(skuMarketplaceListaCorrente.skuMarketplaceDTOs, filtroDescontar));


                // Extrair dados para os gráficos
                ExtrairResultadosListaCorrente();

            }

            // Registra o evento de mudança de filtro (Filtro do Anymarket) / observer
            FiltroService.OnFiltroToggled += async () =>
            {
                mostrarFiltro = FiltroService.MostrarFiltro;
                await InvokeAsync(StateHasChanged);
            };

            scrapingDadosDTOListaCorrente = scrapingManager.scrapingDadosDTO;
            // Força a re-renderização do componente
            StateHasChanged();
        }
    }

    // Extrai os dados para os gráficos de rosca
    private void ExtrairResultadosListaCorrente()
    {

        if (skuMarketplaceListaCorrente != null)
        {
            //Grafico de rosca Erros
            Dictionary<string, double> resultadosNumerosErros = skuMarketplaceListaCorrente.ObterErros();
            dadosTiposErros = resultadosNumerosErros.Values.ToArray();
            labelsTiposErros = resultadosNumerosErros.Keys.ToArray();

            //Grafico de rosca Eventos

            Dictionary<string, double> resultadosNumeroEventos =
            skuMarketplaceListaCorrente.ObterDistribuicaoEventos();
            labelsTiposEventos = resultadosNumeroEventos.Keys.ToArray();
            dadosTiposEventos = resultadosNumeroEventos.Values.ToArray();


            // Grafíco para Resumo Financeiro
            Dictionary<string, double> statusPagamento =
            financeiroDadosDTOListaCorrente.ObterDistribuicaoPagamento();

            labelsStatusResumoFinanceiro = statusPagamento.Keys.ToArray();
            dadosStatusResumoFinanceiro = statusPagamento.Values.ToArray();



            Dictionary<string, double> errosPagamentos =
            financeiroDadosDTOListaCorrente.ObterDistribuicaoErrosPagamento();

            labelsErrosResumoFinanceiro = errosPagamentos.Keys.ToArray();
            dadosErrosResumoFinanceiro = errosPagamentos.Values.ToArray();

        }

    }

    // Metodo para controla a janela do filtro avançado
    public void ResetarFiltro()
    {
        _filtro = new SkuMarketplaceFilterService();
        AplicarFiltro();
    }

    // Metodo que aplica o filtro avançado e atualiza as lista corrente
    private void AplicarFiltro()
    {
        // Aqui você pode aplicar o filtro em sua tabela, API, etc.
        List<SkuMarketplaceDTO> ListaFiltada =
        SkuMarketplaceFilterService.AplicarFiltros(SkuManager.resultDTO.skuMarketplaceDTOs, _filtro);
        if (ListaFiltada != null && ListaFiltada.Any())
        {
            skuMarketplaceListaCorrente = new SkuMarketplaceDadosDTO(ListaFiltada);


            tipoErroSelecionado = new List<AnymarketErros>();
            FiltrarAnymarkert();

            // Lista de AnymarketDTOs filtrados
            List<AnymarketDTO> anymarketFiltrados =
            AnymarketManager.AtualizarListaAsync(skuMarketplaceListaCorrente.skuMarketplaceDTOs).Result;

            // Lista de ResumoFinanceiroDTOs filtrados
            var financeiroFiltrados = FinanceiroManager.AtualizarListaAsync(skuMarketplaceListaCorrente.skuMarketplaceDTOs).Result;


            // Recriação do objeto com lista filtrada
            anymarketDadosListaCorrente = new AnymarketDadosDTO(anymarketFiltrados);
            anymarketDadosListaTemporaria.anymarketDTOs = anymarketDadosListaCorrente.anymarketDTOs.ToList();



            // Recriação do objeto com lista filtrada
            financeiroDadosDTOListaCorrente = new ResumoFinanceiroDadosDTO(financeiroFiltrados);
            financeiroDadosDTOListaTemporaria.resumoFinanceiroDTOs = financeiroDadosDTOListaCorrente.resumoFinanceiroDTOs.ToList();



            ExtrairResultadosListaCorrente();
            StateHasChanged();
            mostrarFiltro = false;
            FiltroService.ToggleFiltro();

            Snackbar.Add("Filtro aplicado!", Severity.Success);

        }
        else
            Snackbar.Add("Não existe nenhum registro na base com essa características", Severity.Error);

    }


    public void AtualizarListaAnymarket(List<AnymarketErros> listaErros)
    {
        tipoErroSelecionado = listaErros.ToList();
        FiltrarAnymarkert();

    }
    // Metodo que filtra os dados do Anymarket
    private void FiltrarAnymarkert()
    {
        var listaOriginal = anymarketDadosListaTemporaria.anymarketDTOs;

        anymarketDadosListaCorrente.anymarketDTOs = (tipoErroSelecionado == null || !tipoErroSelecionado.Any())
        ? listaOriginal.ToList()
        : listaOriginal
        .Where(dto => tipoErroSelecionado.Contains(dto.Erros))
        .ToList();
    }


    public void AtualizarListaResumoFinanceiro(List<StatusPagamento> listaStatus)
    {
        resumoFinaceiroStatus = listaStatus.ToList();
        FiltrarResumoFinaceiro();
    }

    // Metodo que filtra os dados do Anymarket
    private void FiltrarResumoFinaceiro()
    {
        var listaOriginal = financeiroDadosDTOListaTemporaria.resumoFinanceiroDTOs.ToList();


        financeiroDadosDTOListaCorrente.resumoFinanceiroDTOs = (resumoFinaceiroStatus == null || !resumoFinaceiroStatus.Any())
        ? listaOriginal.ToList()
        : listaOriginal
        .Where(dto => resumoFinaceiroStatus.Contains(dto.situacaoPagamento))
        .ToList();
    }

    // Metodo que gerencia a lista de erros do filtro avançado
    private void OnErrosChanged(IEnumerable<Erros> errosSelecionados)
    {
        _filtro.listaErros = errosSelecionados.ToList();
    }

    // Metodo que gerencia a lista de Eventos do filtro avançado
    private void OnEventosChanged(IEnumerable<Eventos> eventosSelecionados)
    {
        _filtro.TipoEventos = eventosSelecionados.ToList();
    }
    private void ToggleDrawer()
    {
        _drawerOpen = !_drawerOpen;
    }

       private void OnFiltroClick()
    {
        mostrarFiltro = !mostrarFiltro;
        FiltroService.ToggleFiltro();
        ScrollToTopAsync();
    }

      private async Task ScrollToTopAsync()
    {
        await JS.InvokeVoidAsync("window.scrollTo", 0, 0);
    }
}
